# TextMate tutorial: http://manual.macromates.com/en/language_grammars

# Regex to convert keys to unquoted: '(include|match|captures|begin|end|beginCaptures|endCaptures|name|patterns|0|1|2|3|4|5|6|7|8|9|comment|fileTypes|scopeName|repository|contentName|firstLineMatch|foldingStartMarker|foldingStopMarker)':

scopeName: 'source.gql' # <scope> should be a short, unique indicator for the language ("js", "php", "c", etc.)
name: 'Graql' # The title that will show up in grammar selection and on your status bar.
fileTypes: [ # An array of file extensions.
  'gql',
  'graql'
]
firstLineMatch: '' # A regular expression that is matched against the first line of the document when Atom is trying to decide if the grammar is appropriate. Useful for shell scripts, mostly.
foldingStartMarker: '' # A regular expression that checks for the start of a foldable area (such as `{`).
foldingStopMarker: '' # A regular expression that checks for the end of a foldable area (such as `}`). If both folding markers are matched in the same line, there will be no foldable area.
patterns: [
  { include: '#comment' }
  { include: '#block_define' }
  { include: '#block_undefine' }
  { include: '#block_insert' }
  { include: '#block_match' }
  { include: '#block_get' }
]

repository:
  block_define:
    patterns: [
      {
        # define and undefine blocks
        begin: '\\bdefine\\b'
        beginCaptures:
          0: name: 'keyword.control.define.graql'
        end: '''(?x)
            (?=
              \\binsert\\b |
              \\bdefine\\b |
              \\bundefine\\b |
              \\bmatch\\b |
              \\bget\\b
            )
          '''
        name: 'meta.define.graql'
        patterns: [{ include: '#define' }]
      }
    ]
  block_undefine:
    patterns: [
      {
        # undefine block
        begin: '\\bundefine\\b'
        beginCaptures:
          0: name: 'keyword.control.undefine.graql'
        end: '''(?x)
            (?=
              \\binsert\\b |
              \\bdefine\\b |
              \\bundefine\\b |
              \\bmatch\\b |
              \\bget\\b
            )
          '''
        name: 'meta.define.graql'
        patterns: [{ include: '#define' }]
      }
    ]
  block_insert:
    patterns: [
      {
        # insert block
        begin: '\\binsert\\b'
        beginCaptures:
          0: name: 'keyword.control.insert.graql'
        end: '''(?x)
            (?=
              \\binsert\\b |
              \\bdefine\\b |
              \\bundefine\\b |
              \\bmatch\\b |
              \\bget\\b
            )
          '''
        name: 'meta.insert.graql'
        patterns: [{ include: '#insert' }]
      }
    ]
  block_match:
    patterns: [
      {
        # match block
        begin: '\\bmatch\\b'
        beginCaptures:
          0: name: 'keyword.control.insert.graql'
        end: '''(?x)
            (?=
              \\binsert\\b |
              \\bdefine\\b |
              \\bundefine\\b |
              \\bmatch\\b |
              \\bget\\b
            )
          '''
        name: 'meta.match.graql'
        patterns: [{ include: '#match' }]
      }
    ]
  block_get:
    patterns: [
      {
        # get block
        begin: '\\bget\\b'
        beginCaptures:
          0: name: 'keyword.control.get.graql'
        end: ';'
        name: 'meta.get.block.graql'
        patterns: [
          # comments
          { include: '#comment' }
          # variables
          { include: '#variable' }
        ]
      }
    ]
  define:
    patterns: [
      # comments
      { include: '#comment' }
      # keywords
      { include: '#keyword_sub' }
      { include: '#keyword_plays' }
      { include: '#keyword_relates' }
      { include: '#keyword_as' }
      { include: '#keyword_has' }
      { include: '#keyword_key' }
      { include: '#keyword_id' }
      { include: '#keyword_datatype' }
      { include: '#keyword_regex' }
      { include: '#keyword_is_abstract' }
      { include: '#keyword_label' }
      # statements
      { include: '#statement_when' }
      { include: '#statement_then' }
      { include: '#statement_for' }
      { include: '#statement_if' }
      { include: '#statement_do' }
      # constants
      { include: '#constant_regex' }
      # datatypes
      { include: '#datatypes_build_in' }
      # variables
      { include: '#variable_build_in' }
      { include: '#variable' }
      # identifiers
      { include: '#identifier_build_in' }
      { include: '#identifier' }
      # templates
      { include: '#template_variable' }
      { include: '#template' }
    ]
  insert:
    patterns: [
      # comments
      { include: '#comment' }
      # keywords
      { include: '#keyword_sub' }
      { include: '#keyword_plays' }
      { include: '#keyword_relates' }
      { include: '#keyword_as' }
      { include: '#keyword_has' }
      { include: '#keyword_key' }
      { include: '#keyword_id' }
      { include: '#keyword_datatype' }
      { include: '#keyword_regex' }
      { include: '#keyword_is_abstract' }
      { include: '#keyword_label' }
      { include: '#keyword_isa' }
      # constants
      { include: '#constant_date' }
      { include: '#constant_string' }
      { include: '#constant_boolean' }
      { include: '#constant_numeric' }
      { include: '#constant_regex' }
      # statements
      { include: '#statement_relationship' }
      { include: '#statement_for' }
      { include: '#statement_if' }
      { include: '#statement_do' }
      # variables
      { include: '#variable_build_in' }
      { include: '#variable' }
      # identifiers
      { include: '#identifier_build_in' }
      { include: '#identifier' }
      # templates
      { include: '#template_variable' }
      { include: '#template' }
    ]
  match:
    patterns: [
      # comments
      { include: '#comment' }
      # keywords
      { include: '#keyword_sub' }
      { include: '#keyword_plays' }
      { include: '#keyword_relates' }
      { include: '#keyword_as' }
      { include: '#keyword_has' }
      { include: '#keyword_key' }
      { include: '#keyword_id' }
      { include: '#keyword_datatype' }
      { include: '#keyword_regex' }
      { include: '#keyword_is_abstract' }
      { include: '#keyword_label' }
      { include: '#keyword_isa_exact' }
      { include: '#keyword_isa' }
      { include: '#keyword_comparison' }
      # constants
      { include: '#constant_date' }
      { include: '#constant_string' }
      { include: '#constant_boolean' }
      { include: '#constant_numeric' }
      { include: '#constant_regex' }
      # statements
      { include: '#statement_relationship' }
      { include: '#statement_for' }
      { include: '#statement_if' }
      { include: '#statement_do' }
      # variables
      { include: '#variable_build_in' }
      { include: '#variable' }
      # identifiers
      { include: '#identifier_build_in' }
      { include: '#identifier' }
      # templates
      { include: '#template_variable' }
      { include: '#template' }
    ]

  statement_when:
    patterns: [
      {
        # when { ... }
        begin: '\\bwhen\\b'
        beginCaptures:
          0: name: 'keyword.control.when.graql'
        end: '(?<=})'
        name: 'meta.rule.when.graql'
        patterns: [
          {
            # { ... }
            begin: '{'
            beginCaptures:
              0: name: 'punctuation.definition.when.start.graql'
            end: '}'
            endCaptures:
              0: name: 'punctuation.definition.when.end.graql'
            name: 'meta.rule.when.statements.graql'
            patterns: [{ include: '#match' }]
          }
        ]
      }
    ]

  statement_then:
    patterns: [
      {
        # then { ... }
        begin: '\\bthen\\b'
        beginCaptures:
          0: name: 'keyword.control.then.graql'
        end: '(?<=})'
        name: 'meta.rule.then.graql'
        patterns: [
          {
            # { ... }
            begin: '{'
            beginCaptures:
              0: name: 'punctuation.definition.then.start.graql'
            end: '}'
            endCaptures:
              0: name: 'punctuation.definition.then.end.graql'
            name: 'meta.rule.then.statements.graql'
            patterns: [{ include: '#insert' }]
          }
        ]
      }
    ]

  statement_relationship:
    patterns: [
      {
        # (role1: $id1, role2: $id2)
        begin: '[(]'
        beginCaptures:
          1: name: 'punctuation.definition.start.graql'
        end: '[)]'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.relationship.graql'
        patterns: [
          { include: '#identifier_role' }
          { include: '#identifier_build_in' }
          { include: '#identifier' }
          { include: '#variable' }
          { include: '#variable_build_in' }
          { include: '#template_variable' }
          { include: '#template' }
        ]
      }
    ]

  statement_for:
    patterns: [
      {
        # for ( ... )
        begin: '\\bfor\\b'
        beginCaptures:
          0: name: 'keyword.control.for.graql'
        end: '(?<=\\))'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.for.graql'
        patterns: [
          { include: '#comment' }
          {
            # ( ... )
            begin: '[(]'
            beginCaptures:
              0: name: 'punctuation.definition.start.graql'
            end: '[)]'
            endCaptures:
              0: name: 'punctuation.definition.end.graql'
            name: 'meta.for.statements.graql'
            patterns: [
              { include: '#comment' }
              { include: '#keyword_in' }
              { include: '#identifier_build_in' }
              { include: '#identifier' }
              { include: '#template_variable' }
              { include: '#template' }
              { include: '#constant_string' }
            ]
          }
        ]
      }
    ]

  statement_if:
    patterns: [
      {
        # if ( ... )
        begin: '\\bif\\b'
        beginCaptures:
          0: name: 'keyword.control.if.graql'
        end: '(?<=\\))'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.if.graql'
        patterns: [
          { include: '#comment' }
          {
            # ( ... )
            begin: '[(]'
            beginCaptures:
              0: name: 'punctuation.definition.start.graql'
            end: '[)]'
            endCaptures:
              0: name: 'punctuation.definition.end.graql'
            name: 'meta.if.statements.graql'
            patterns: [
              { include: '#comment' }
              { include: '#keyword_comparison' }
              { include: '#identifier_build_in' }
              { include: '#identifier' }
              { include: '#template_variable' }
              { include: '#template' }
              { include: '#constant_string' }
            ]
          }
        ]
      }
    ]

  # do { ... }
  statement_do:
    patterns: [
      {
        begin: '\\bdo\\b'
        beginCaptures:
          0: name: 'keyword.control.do.graql'
        end: '(?<=})'
        endCaptures:
          0: name: 'punctuation.definition.end.graql'
        name: 'meta.do.graql'
        patterns: [
          { include: '#comment' }
          {
            # { ... }
            begin: '[{]'
            beginCaptures:
              0: name: 'punctuation.definition.start.graql'
            end: '[}]'
            endCaptures:
              0: name: 'punctuation.definition.end.graql'
            name: 'meta.do.statements.graql'
            patterns: [
              { include: '#block_define' }
              { include: '#block_undefine' }
              { include: '#block_insert' }
              { include: '#block_match' }
              { include: '#block_get' }
              { include: '#insert' }
              { include: '#match' }
              { include: '#define' }
            ]
          }
        ]
      }
    ]

  keyword_sub:
    patterns: [{
        match: '\\bsub\\b'
        name: 'keyword.control.sub.graql'
      }]
  keyword_plays:
    patterns: [{
        match: '\\bplays\\b'
        name: 'keyword.control.plays.graql'
      }]
  keyword_relates:
    patterns: [{
        match: '\\brelates\\b'
        name: 'keyword.control.relates.graql'
      }]
  keyword_as:
    patterns: [{
        match: '\\bas\\b'
        name: 'keyword.control.as.graql'
      }]
  keyword_has:
    patterns: [{
        match: '\\bhas\\b(?!-)'
        name: 'keyword.control.has.graql'
      }]
  keyword_key:
    patterns: [{
        match: '\\bkey\\b'
        name: 'keyword.control.key.graql'
      }]
  keyword_id:
    patterns: [{
        match: '\\bid\\b'
        name: 'keyword.control.id.graql'
      }]
  keyword_datatype:
    patterns: [{
        match: '\\bdatatype\\b'
        name: 'keyword.control.datatype.graql'
      }]
  keyword_regex:
    patterns: [{
        match: '\\bregex\\b'
        name: 'keyword.control.regex.graql'
      }]
  keyword_is_abstract:
    patterns: [{
        match: '\\bis-abstract\\b'
        name: 'keyword.control.abstract.graql'
      }]
  keyword_label:
    patterns: [{
        match: '\\blabel\\b'
        name: 'keyword.control.label.graql'
      }]
  keyword_isa:
    patterns: [{
      match: '\\bisa\\b'
      name: 'keyword.control.isa.graql'
      }]
  keyword_isa_exact:
    patterns: [{
      match: '\\bisa[!]'
      name: 'keyword.control.isa.exact.graql'
      }]
  keyword_in:
    patterns: [{
      match: '\\bin\\b'
      name: 'keyword.control.in.graql'
      }]
  keyword_comparison:
    patterns: [{
        match: '[!<>]?=|<>|<|>'
        name: 'keyword.operator.comparison.graql'
      }]

  comment:
    patterns: [
      {
        begin: '#'
        end: '$'
        name: 'comment.line.dash.graql'
      }
    ]
  constant_boolean:
    patterns: [
      {
        match: '\\b(true|false)\\b'
        name: 'constant.boolean.graql'
      }
    ]
  constant_date:
    patterns: [
      {
        match: '\\b\\d{4,}-\\d{2}-\\d{2}[T ]\\d{2}:\\d{2}(?::(?:\\d{2}(?:\\.\\d+)?))?\\b'
        name: 'constant.date.graql'
      }
    ]
  constant_numeric:
    patterns: [
      {
        match: '([\\-\\+]?(?:(?:\\d+\\.\\d+)|(?:\\d+[i]?)))\\b'
        name: 'constant.numeric.graql'
      }
    ]

  variable:
    patterns: [
      {
        match: '[$][a-zA-Z0-9\\-_]+\\b'
        name: 'variable.graql'
      }
    ]
  variable_build_in:
    patterns: [
      {
        match: '@[a-zA-Z0-9\\-_]+\\b'
        name: 'support.function.any-method.relationship.graql'
      }
    ]

  template_variable:
    patterns: [{
        match: '[$]<(.*?)>'
        name: 'markup.raw.graql'
      }]
  template:
    patterns: [{
        match: '<.*?>'
        name: 'markup.raw.graql'
        captures:
          1:
            name: 'meta.other.graql'
            patterns: [{
                match: '[[]\\d*[]]'
                name: 'meta.selector.graql'
              }]
      }]

  identifier_build_in:
    patterns: [
      {
        match: '(\\"entity\\")|(\\bentity\\b)'
        name: 'support.type.entity.graql'
      }
      {
        match: '(\\"relation\\")|(\\brelation\\b)'
        name: 'support.type.relationship.graql'
      }
      {
        match: '(\\"role\\")|(\\brole\\b)'
        name: 'support.type.role.graql'
      }
      {
        match: '(\\"attribute\\")|(\\battribute\\b)'
        name: 'support.type.attribute.graql'
      }
      {
        match: '(\\"rule\\")|(\\brule\\b)'
        name: 'support.type.rule.graql'
      }
    ]
  identifier:
    patterns: [{
        match: '(\\"[a-zA-Z0-9\\-_]+\\")|(\\b[a-zA-Z0-9\\-_]+\\b)'
        name: 'entity.type.name.graql'
      }]
  identifier_role:
    patterns: [{
        match: '(\\"[a-zA-Z0-9\\-_]+\\")|(\\b[a-zA-Z0-9\\-_]+\\b)\\s*[:]'
        name: 'support.function.any-method.relationship.graql'
      }]

  datatypes_build_in:
    patterns: [
      {
        match: '\\blong\\b'
        name: 'support.type.datatype.long.graql'
      }
      {
        match: '\\bdouble\\b'
        name: 'support.type.datatype.double.graql'
      }
      {
        match: '\\bstring\\b'
        name: 'support.type.datatype.strings.graql'
      }
      {
        match: '\\bboolean\\b'
        name: 'support.type.datatype.boolean.graql'
      }
      {
        match: '\\bdate\\b'
        name: 'support.type.datatype.date.graql'
      }
    ]
  constant_regex:
    patterns: [
      {
        # regex string
        match: '(/)[^\\\\]*(/)'
        name: 'string.regex.graql'
        captures:
          1: name: 'punctuation.definition.regex.begin.graql'
          2: name: 'punctuation.definition.regex.end.graql'
      }
    ]
  constant_string:
    patterns: [
      {
        # Single-quoted string
        match: '(\')[^\'\\\\]*(\')'
        name: 'string.quoted.single.graql'
        captures:
          1: name: 'punctuation.definition.string.begin.graql'
          2: name: 'punctuation.definition.string.end.graql'
        comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and graql files tend to have very long lines.'
      }
      {
        begin: '\''
        beginCaptures:
          0: name: 'punctuation.definition.string.begin.graql'
        end: '\''
        endCaptures:
          0: name: 'punctuation.definition.string.end.graql'
        name: 'string.quoted.single.graql'
        patterns: [
          { include: '#string_escape' }
        ]
      }
      {
        # Double-quoted string
        match: '(")[^"\\\\]*(")'
        captures:
          1: name: 'punctuation.definition.string.begin.graql'
          2: name: 'punctuation.definition.string.end.graql'
        comment: 'this is faster than the next begin/end rule since sub-pattern will match till end-of-line and graql files tend to have very long lines.'
        name: 'string.quoted.double.graql'
      }
      {
        begin: '"'
        beginCaptures:
          0: name: 'punctuation.definition.string.begin.graql'
        end: '"'
        endCaptures:
          0: name: 'punctuation.definition.string.end.graql'
        name: 'string.quoted.double.graql'
        patterns: [
          { include: '#string_escape' }
        ]
      }
    ]
  'string_escape':
    'patterns': [
      {
        'match': '\\\\u(?![A-Fa-f0-9]{4}|{[A-Fa-f0-9]+})[^\'"]*'
        'name': 'invalid.illegal.unicode-escape.js'
      }
      {
        'match': '\\\\u(?:[A-Fa-f0-9]{4}|({)([A-Fa-f0-9]+)(}))'
        'name': 'constant.character.escape.js'
        'captures':
          '1':
            'name': 'punctuation.definition.unicode-escape.begin.bracket.curly.js'
          '2':
            'patterns': [
              {
                # Max codepoint: \u{10FFFF}
                'match': '[A-Fa-f\\d]{7,}|(?!10)[A-Fa-f\\d]{6}'
                'name': 'invalid.illegal.unicode-escape.js'
              }
            ]
          '3':
            'name': 'punctuation.definition.unicode-escape.end.bracket.curly.js'
      }
      {
        'match': '\\\\(x[0-9A-Fa-f]{2}|[0-2][0-7]{0,2}|3[0-6][0-7]?|37[0-7]?|[4-7][0-7]?|.)'
        'name': 'constant.character.escape.js'
      }
    ]
